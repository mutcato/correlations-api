name: CI/CD Pipeline

on:
  push:
    branches: [ master ]

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      # Step 1
      - uses: actions/checkout@v2
      # Step 2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.10
          architecture: x64
      # Step 3
      - name: Install Python Virtualenv
        run: pip install --upgrade pip && pip3 install virtualenv
      # Step 4
      - name: Setup Virtualenv
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
              ${{ runner.os }}-venv-
      # Step 5
      - name: Activate and Install Dependecies into Virtual env
        run: |
          python3 -m venv venv && source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'
      # Step 6
      #- name: Activate venv and Run Test
      #  run: . venv/bin/activate && uvicorn app.main:app --reload && pytest
      # Step 7
      - name: Create Zipfile archive of Dependencies
        run: |
          cd ./venv/lib/python3.8/site-packages
          ls -la
          zip -r9 ../../../../api.zip .
          cd -
      # Step 8
      - name: Add App to Zip file
        run: ls -la && zip -g api.zip -r app
      # Step 9
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api.zip
  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/master'
    steps:
      # Step 1
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_LAMBDA_DEPLOY_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_LAMBDA_DEPLOY_SECRET }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_LAMBDA_DEPLOY_REGION }}
      # Step 2
      - name: Download Lambda api.zip
        uses: actions/download-artifact@v2
        with:
          name: api
      # Step 3
      - name: Upload to S3
        run: aws s3 cp api.zip s3://correlations-api-fns/api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_LAMBDA_DEPLOY_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_LAMBDA_DEPLOY_SECRET }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_LAMBDA_DEPLOY_REGION }}
      # Step 4
      - name: Deploy new Lambda
        run: aws lambda update-function-code --function-name correlations-api --s3-bucket correlations-api-fns --s3-key api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_LAMBDA_DEPLOY_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_LAMBDA_DEPLOY_SECRET }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_LAMBDA_DEPLOY_REGION }}